import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import axios from 'axios';
import { Storage } from '../shared/storage.js';
import { SettingsManager } from '../shared/settings.js';

// Get __dirname equivalent in ES modules
const __dirname = path.dirname(fileURLToPath(import.meta.url));

// Storage and Settings managers
let storage = null;
let settingsManager = null;
let settingsInitialized = false;
let storageInitialized = false;
let mainWindow = null;

// Track if handlers have been registered to prevent duplicates
let handlersRegistered = false;

async function initializeSettings() {
  try {
    if (settingsInitialized && settingsManager) return true;
    
    const userDataPath = app.getPath('userData');
    console.log(`Initializing settings in path: ${userDataPath}`);
    
    settingsManager = new SettingsManager(userDataPath);
    await settingsManager.initialize();
    
    settingsInitialized = true;
    console.log('Settings initialization complete');
    return true;
  } catch (err) {
    console.error('Error initializing settings:', err);
    return false;
  }
}

async function initializeStorage() {
  try {
    if (storageInitialized && storage) return storage;
    
    // Make sure settings are initialized first
    if (!settingsInitialized || !settingsManager) {
      console.log('Settings not initialized, initializing now...');
      await initializeSettings();
    }
    
    // Get settings for custom DB path if available
    let dbPath = app.getPath('userData');
    
    if (settingsManager) {
      const settings = settingsManager.getSettings();
      if (settings.dbPath) {
        dbPath = settings.dbPath;
        console.log(`Using custom database path from settings: ${dbPath}`);
      } else {
        console.log(`Using default userData path for database: ${dbPath}`);
      }
    } else {
      console.warn('Settings manager still not available, using default path for database');
    }
    
    console.log(`Creating storage with path: ${dbPath}`);
    storage = new Storage(dbPath);
    const success = await storage.init();
    
    if (!success) {
      console.error('Storage initialization failed, trying fallback to userData');
      // Try with default path as fallback
      storage = new Storage(app.getPath('userData'));
      await storage.init();
    }
    
    storageInitialized = true;
    console.log('Storage initialization complete');
    return storage;
  } catch (err) {
    console.error('Error initializing storage:', err);
    // Create fallback in-memory storage
    storage = new Storage(app.getPath('userData'));
    await storage.init();
    storageInitialized = true;
    return storage;
  }
}

/**
 * Register all IPC handlers - only called once
 */
function registerIpcHandlers() {
  if (handlersRegistered) {
    console.log('IPC handlers already registered, skipping');
    return;
  }
  
  console.log('Registering IPC handlers');
  
  // Settings handlers
  ipcMain.handle('getSettings', async () => {
    try {
      if (!settingsManager) await initializeSettings();
      const settings = settingsManager.getSettings();
      return { success: true, data: settings };
    } catch (error) {
      console.error('Error getting settings:', error);
      return { success: false, error: error.message };
    }
  });
  
  ipcMain.handle('saveSettings', async (event, newSettings) => {
    try {
      if (!settingsManager) await initializeSettings();
      const settings = await settingsManager.updateSettings(newSettings);
      return { success: true, data: settings };
    } catch (error) {
      console.error('Error saving settings:', error);
      return { success: false, error: error.message };
    }
  });
  
  ipcMain.handle('selectDirectory', async () => {
    try {
      const result = await dialog.showOpenDialog({
        properties: ['openDirectory', 'createDirectory'],
        title: 'Select Database Storage Location'
      });
      
      if (!result.canceled && result.filePaths.length > 0) {
        return { success: true, path: result.filePaths[0] };
      } else {
        return { success: false, error: 'No directory selected' };
      }
    } catch (error) {
      console.error('Error selecting directory:', error);
      return { success: false, error: error.message };
    }
  });
  
  // HTTP request handler
  ipcMain.handle('send-request', async (event, config) => {
    console.log('Sending request:', config);
    try {
      // Set validateStatus here in main process instead of renderer
      const axiosConfig = {
        ...config,
        validateStatus: () => true // Accept any status code
      };
      const res = await axios(axiosConfig);
      return {
        success: true,
        status: res.status,
        statusText: res.statusText,
        headers: res.headers,
        data: res.data
      };
    } catch (e) {
      return {
        success: false,
        error: e.message,
        status: e.response?.status || 0,
        statusText: e.response?.statusText || 'Error',
        headers: e.response?.headers || {},
        data: e.response?.data || null
      };
    }
  });
  
  // Collection handlers
  ipcMain.handle('get-collections', async () => {
    try {
      const collections = await storage.getCollections();
      console.log(`Returning ${collections.length} collections from get-collections handler`);
      return { success: true, data: collections };
    } catch (error) {
      console.error('Error getting collections:', error);
      return { success: false, error: error.message };
    }
  });
  
  ipcMain.handle('create-collection', async (event, collectionData) => {
    try {
      // Ensure storage is properly initialized
      if (!storage || !storageInitialized) {
        console.log('Storage not initialized, initializing now...');
        await initializeStorage();
      }
      
      // Handle both formats: string or object with name property
      let collectionName;
      
      if (typeof collectionData === 'string') {
        collectionName = collectionData;
      } else if (collectionData && typeof collectionData === 'object' && collectionData.name) {
        collectionName = collectionData.name;
      } else {
        console.error('Invalid collection data:', collectionData);
        return { success: false, error: 'Invalid collection data format' };
      }
      
      if (!collectionName || collectionName.trim() === '') {
        console.error('Empty collection name');
        return { success: false, error: 'Collection name cannot be empty' };
      }
      
      console.log(`Creating collection: ${collectionName}`);
      const collection = await storage.createCollection(collectionName);
      console.log('Collection created successfully:', collection);
      return { success: true, data: collection };
    } catch (error) {
      console.error('Error creating collection:', error);
      return { success: false, error: error.message || 'Failed to create collection' };
    }
  });
  
  ipcMain.handle('update-collection', async (event, id, updates) => {
    try {
      const updated = await storage.updateCollection(id, updates);
      return { success: true, data: updated };
    } catch (error) {
      console.error('Error updating collection:', error);
      return { success: false, error: error.message };
    }
  });
  
  ipcMain.handle('delete-collection', async (event, id) => {
    try {
      const result = await storage.deleteCollection(id);
      return { success: result, data: result };
    } catch (error) {
      console.error('Error deleting collection:', error);
      return { success: false, error: error.message };
    }
  });
  
  // Requests API
  ipcMain.handle('get-requests', async (event, collectionId) => {
    try {
      const requests = await storage.getRequests(collectionId);
      return { success: true, data: requests };
    } catch (error) {
      console.error('Error getting requests:', error);
      return { success: false, error: error.message };
    }
  });
  
  ipcMain.handle('add-request', async (event, collectionId, request) => {
    try {
      const newRequest = await storage.addRequest(collectionId, request);
      return { success: true, data: newRequest };
    } catch (error) {
      console.error('Error adding request:', error);
      return { success: false, error: error.message };
    }
  });
  
  ipcMain.handle('update-request', async (event, collectionId, requestId, updates) => {
    try {
      const updated = await storage.updateRequest(collectionId, requestId, updates);
      return { success: true, data: updated };
    } catch (error) {
      console.error('Error updating request:', error);
      return { success: false, error: error.message };
    }
  });
  
  ipcMain.handle('delete-request', async (event, collectionId, requestId) => {
    try {
      const result = await storage.deleteRequest(collectionId, requestId);
      return { success: result, data: result };
    } catch (error) {
      console.error('Error deleting request:', error);
      return { success: false, error: error.message };
    }
  });
  
  // App control
  ipcMain.handle('reload-app', () => {
    try {
      app.relaunch();
      app.exit(0);
      return { success: true };
    } catch (error) {
      console.error('Error reloading app:', error);
      return { success: false, error: error.message };
    }
  });
  
  handlersRegistered = true;
}

/**
 * Initialize the main window
 */
async function createWindow() {
  // Initialize storage
  await initializeStorage();
  
  console.log('main process', process.cwd());
  // In ES modules, __dirname is not available directly, we need to construct it
  const preloadPath = path.join(__dirname, 'preload.js');
  //log preload
  console.log('preload path', preloadPath);
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      contextIsolation: true,
      preload: preloadPath,
    }
  });

  try {
    if (!app.isPackaged) {
      // Development mode - try to load from dev server, but fall back to static files if server isn't running
      try {
        console.log('Attempting to connect to development server at http://localhost:5173');
        await mainWindow.loadURL('http://localhost:5173');
        console.log('Successfully connected to development server');
      } catch (error) {
        console.warn('Could not connect to development server, falling back to build directory', error);
        const __dirname = path.dirname(fileURLToPath(import.meta.url));
        mainWindow.loadFile(path.join(__dirname, '../../build/index.html')).catch(err => {
          console.error('Failed to load from build directory:', err);
          mainWindow.webContents.openDevTools();
          mainWindow.webContents.loadFile(path.join(__dirname, '../renderer/error.html'));
        });
      }
    } else {
      // Production mode - load from build directory
      const __dirname = path.dirname(fileURLToPath(import.meta.url));
      mainWindow.loadFile(path.join(__dirname, '../../build/index.html'));
    }
  } catch (err) {
    console.error('Error loading window content:', err);
  }
}

// App lifecycle events
app.whenReady().then(async () => {
  // Register IPC handlers first
  registerIpcHandlers();
  
  // Then create the window
  await createWindow();
  
  // Verify storage is properly initialized with a final check
  try {
    if (storage) {
      const collections = await storage.getCollections();
      console.log(`App ready with ${collections.length} collections available`);
    } else {
      console.error('Storage is not initialized! App will not function correctly.');
    }
  } catch (err) {
    console.error('Error checking storage:', err);
  }
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit();
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) createWindow();
});
